mport os
import sys
import shutil
import optparse

import imgcreate
import logging

def parse_options(args):
    parser = optparse.OptionParser(usage = "%prog [--disk=<disk1>] [--size=<MB>] <kickstart>")

    parser.add_option("-n", "--name", type="string", dest="name",
                      help="Appliance name")
    parser.add_option("-D", "--disk", type="string", dest="disk",
                      action="append", help="Disk file name")
    parser.add_option("-s", "--size", type="float", dest="size",
                      action="append", help="Disk size in MB")
    parser.add_option("-f", "--format", type="string", dest="format",
                      help="Disk format (raw, qcow2, vmdk, ...)")

    imgcreate.setup_logging(parser)

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_usage()
        sys.exit(1)

    return (args[0], options)

def main():
    (kscfg, options) = parse_options(sys.argv[1:])

    if os.geteuid () != 0:
        print >> sys.stderr, "You must run appliance-creator as root"
        return 1

    try:
        ks = imgcreate.read_kickstart(kscfg)
    except imgcreate.CreatorError, e:
        logging.error("Unable to load kickstart file '%s' : %s" % (kscfg, e))
        return 1

    disks = []

#   Disk Info Read form kickstart file 
#
#    if options.disk is None:
#        name = imgcreate.build_name(kscfg)
#        size = 4096L * 1024L * 1024L
#        if options.size is not None:
#            if type(options.size) != float:
#                logging.error("Too many disk sizes provided")
#                return 1
#            size = options.size * 1024L * 1024L
#
#        disks.append({ 'name': name, 'size': size })
#    elif type(options.disk) == list:
#        if type(options.size) != list or len(options.size) != len(options.disk):
#            logging.error("Must provide a size for each disk")
#            return 1
#
#        for i in range(len(options.disk)):
#            disks.append({ 'name': options.disk[i], 'size': options.size[i] * 1024L * 1024L })
#    else:
#        size = 4096L * 1024L * 1024L
#        if options.size is not None:
#            if type(options.size) != float:
#                logging.error("Error too many disk sizes provided")
#                return 1
#            size = options.size * 1024L * 1024L
#        
#        disks.append({ 'name': options.disk, 'size': size })

    name = imgcreate.build_name(kscfg)
    if options.name:
        name = options.name

    format = "raw"
    if options.format:
        format = options.format
    creator = imgcreate.ApplianceImageCreator(ks, name, disks, format)

    try:
        creator.create()
    except imgcreate.CreatorError, e:
        logging.error("Unable to create appliance : %s" % e)
        return 1
    finally:
        creator.cleanup()

    return 0

if __name__ == "__main__":
    sys.exit(main())

